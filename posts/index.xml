<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on vast2nix</title>
    <link>https://gtrunsec.github.io/vast2nix/posts/</link>
    <description>Recent content in Posts on vast2nix</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://gtrunsec.github.io/vast2nix/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Lib</title>
      <link>https://gtrunsec.github.io/vast2nix/posts/lib/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gtrunsec.github.io/vast2nix/posts/lib/</guid>
      <description>writeConfig inputs.cells-lab._writers.lib.writeConfig is function that converts the nix attributes to a specific format file</description>
    </item>
    
    <item>
      <title>Quarto Config</title>
      <link>https://gtrunsec.github.io/vast2nix/posts/quarto-config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gtrunsec.github.io/vast2nix/posts/quarto-config/</guid>
      <description>mkEnv </description>
    </item>
    
    <item>
      <title>Vast Config</title>
      <link>https://gtrunsec.github.io/vast2nix/posts/vast-config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gtrunsec.github.io/vast2nix/posts/vast-config/</guid>
      <description>tags Vast Config Files mkConfig mkConfig is a function that helps you to write vast.yaml easily.
example validation feature Use yants for humanized validation output of the type-checker
validation-error = cell.lib.mkConfig { dataDir = &amp;#34;/tmp/vast&amp;#34;; verbosity = &amp;#34;debug&amp;#34;; } { # write your custom configuration here # validation: error vast.store-backend = &amp;#34;archivee&amp;#34;; }; std command: std //vast/config/validation-error:explore path &amp;#39;/home/gtrun/ghq/github.com/GTrunSec/vast2nix/docs/org&amp;#39; does not contain a &amp;#39;flake.nix&amp;#39;, searching up this derivation will be built: /nix/store/axmw9gcrqsi00zvn255mrw35ppqf38ji-explore.</description>
    </item>
    
    <item>
      <title>Vast ConfigFiles</title>
      <link>https://gtrunsec.github.io/vast2nix/posts/vast-configfiles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gtrunsec.github.io/vast2nix/posts/vast-configfiles/</guid>
      <description>inherit functions writeConfig { cells-lab._writers.lib.writeConfig &amp;#34;vast.yaml&amp;#34; cell.config.default; } writeSystemd writeSystemd is a function that helps you to generate vast-systemd.service
vast-systemd.service systemd = cell.lib.writeSystemd { __argBinPath__ = &amp;#34;/opt/vast&amp;#34;; __argConfig__ = &amp;#34;/var/lib/vast/vast.yaml&amp;#34;; __argDir__ = &amp;#34;/var/lib/vast/&amp;#34;; }; std command std //vast/configFiles/systemd:explore [Unit] Description=VAST - Visibility Across Space and Time Wants=network-online.target After=network-online.target [Service] Type=notify # user + privileges # We explicitly don&amp;#39;t use DynamicUser because that can lead to recursive `chown`s. # Doing that is pretty slow on some file systems (e.</description>
    </item>
    
  </channel>
</rss>
